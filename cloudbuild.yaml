tags: ['docker', 'amd64']
substitutions:
# Change this to 'eu.gcr.io' or 'asia.' if the region is known.
  _GCR_HOST:   'gcr.io'
  _PUBLIC_HUB: 'docker.io/blitznote'

steps:
- name: 'gcr.io/cloud-builders/docker'
  id: 'pull common base image'
  args: ['pull', '${_PUBLIC_HUB}/debase:16.04']

- name: 'gcr.io/cloud-builders/docker'
  waitFor: ['pull common base image']
  dir: 'git'
  id: 'git'
  args: ['build',
    '--tag=${_GCR_HOST}/$PROJECT_ID/git',
    '--tag=${_PUBLIC_HUB}/git',
    '--tag=blitznote/git',
    '.']

- name: 'gcr.io/cloud-builders/docker'
  waitFor: ['pull common base image']
  dir: 'gcc'
  id: 'gcc'
  args: ['build',
    '--tag=${_GCR_HOST}/$PROJECT_ID/gcc',
    '--tag=${_PUBLIC_HUB}/gcc',
    '--tag=blitznote/gcc',
    '.']
- name: 'gcr.io/cloud-builders/docker'
  waitFor: ['gcc']
  id: 'gcc tag version'
  entrypoint: '/bin/bash'
  args: ['-c', 'docker tag "${_PUBLIC_HUB}/gcc:latest" "${_PUBLIC_HUB}/gcc:$(docker run -t --rm blitznote/gcc "gcc -v |& tail -n 1 | cut -d ' ' -f 3")"']
- name: 'gcr.io/cloud-builders/docker'
  waitFor: ['gcc']
  id: 'gcc tag minor'
  entrypoint: '/bin/bash'
  args: ['-c', 'docker tag "${_PUBLIC_HUB}/gcc:latest" "${_PUBLIC_HUB}/gcc:$(docker run -t --rm blitznote/gcc "gcc -v |& tail -n 1 | cut -d ' ' -f 3 | cut -b -3")"']

- name: 'gcr.io/cloud-builders/docker'
  waitFor: ['gcc']
  dir: 'cmake'
  id: 'cmake'
  args: ['build',
    '--tag=${_GCR_HOST}/$PROJECT_ID/cmake',
    '--tag=${_PUBLIC_HUB}/cmake',
    '--tag=blitznote/cmake',
    '.']

- name: 'gcr.io/cloud-builders/docker'
  env: ['CI_REGISTRY_IMAGE=${_PUBLIC_HUB}/golang']
  waitFor: ['gcc']
  dir: 'golang'
  id: 'golang'
  entrypoint: '/bin/bash'
  args: ['assemble.sh', '1.11.4', '1.10.7']
- name: 'gcr.io/cloud-builders/docker'
  waitFor: ['golang']
  id: 'tag golang prev'
  args: ['tag', '${_PUBLIC_HUB}/golang:1.10', '${_GCR_HOST}/$PROJECT_ID/golang:1.10']
- name: 'gcr.io/cloud-builders/docker'
  waitFor: ['golang']
  id: 'tag golang current'
  args: ['tag', '${_PUBLIC_HUB}/golang:1.11', '${_GCR_HOST}/$PROJECT_ID/golang:1.11']

- name: 'gcr.io/cloud-builders/docker'
  waitFor: ['golang']
  dir: 'golang/gofmt'
  id: 'golang/gofmt'
  args: ['build',
    '--tag=${_GCR_HOST}/$PROJECT_ID/golang/gofmt',
    '--tag=${_PUBLIC_HUB}/gofmt',
    '.']
- name: 'gcr.io/cloud-builders/docker'
  waitFor: ['golang']
  dir: 'golang/golint'
  id: 'golang/golint'
  args: ['build',
    '--tag=${_GCR_HOST}/$PROJECT_ID/golang/golint',
    '--tag=${_PUBLIC_HUB}/golint',
    '.']
- name: 'gcr.io/cloud-builders/docker'
  waitFor: ['golang']
  dir: 'golang/ineffassign'
  id: 'golang/ineffassign'
  args: ['build',
    '--tag=${_GCR_HOST}/$PROJECT_ID/golang/ineffassign',
    '--tag=${_PUBLIC_HUB}/ineffassign',
    '.']

# Push to (public) Dockerhub.
# Could be done as soon as an image has been built, but I'd like to keep this atomic to avoid inconsistencies in case one failed.

# Usually you'd want secrets to linger around as late as possible.
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'get credentials for Dockerhub'
  args: ['kms', 'decrypt',
    '--keyring=services', '--key=dockerhub',
    '--plaintext-file=.docker/config.json', '--ciphertext-file=.docker/config.json.encrypted',
    '--location=global']
- &docker_push
  name: 'gcr.io/cloud-builders/docker'
  waitFor: ['get credentials for Dockerhub']
  env: ['HOME=/workspace']
  args: ['push', '${_PUBLIC_HUB}/git']
- <<: *docker_push
  args: ['push', '${_PUBLIC_HUB}/gcc']
- <<: *docker_push
  args: ['push', '${_PUBLIC_HUB}/cmake']
- <<: *docker_push
  args: ['push', '${_PUBLIC_HUB}/golang']

# Finally, shred the plaintext secret.
# Any image that comes with `shred` will do here; shredding is not guaranteed to be effective because the filesystem in use is unknown.
- name: '${_PUBLIC_HUB}/git'
  id: 'shred secrets'
  entrypoint: '/usr/bin/shred'
  args: ['.docker/config.json']

images:
- '${_GCR_HOST}/$PROJECT_ID/git'
- '${_GCR_HOST}/$PROJECT_ID/gcc'
- '${_GCR_HOST}/$PROJECT_ID/cmake'
- '${_GCR_HOST}/$PROJECT_ID/golang:1.11'
- '${_GCR_HOST}/$PROJECT_ID/golang:1.10'
- '${_GCR_HOST}/$PROJECT_ID/golang/gofmt'
- '${_GCR_HOST}/$PROJECT_ID/golang/golint'
- '${_GCR_HOST}/$PROJECT_ID/golang/ineffassign'
